<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (discord_create("487336267227594773", 1) == discord_result_ok) {
    trace("Init OK!");
} else trace("Init faied!");
var s = '';
secondary = false;
for (var i = 0; i &lt; parameter_count(); i++) {
    if (i &gt; 0) s += " ";
    var v = parameter_string(i);
    if (string_pos(" ", v)) {
        s += ' "' + v + '"';
    } else s += " " + v;
    if (v == "--secondary") secondary = true;
}
if (!secondary) s += " --secondary";
if (secondary) {
    window_set_position(window_get_x() + window_get_width() + 10, window_get_y());
}
parameter_full = s;
clipboard_set_text('"C:\Program Files\Sandboxie\Start.exe" /box:SteamBox ' + s)
lobby_id = undefined;
lobby_owner_user_id = undefined;
lobby_owner_peer_id = undefined;
lobby_connection_map = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>discord_network_flush();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>discord_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//exit;
var e = async_load;
discord_async_event(e);
var type = e[?"event_type"];
//
var m = ds_map_create();
ds_map_copy(m, e);
var k = ds_map_find_first(e);
repeat (ds_map_size(e)) {
    var v = e[?k];
    if (is_int64(v)) m[?k] = "int64:" + string(v);
    k = ds_map_find_next(e, k);
}
ds_map_delete(m, "event_type");
trace(string(type) + ": " + json_minify(json_encode(m)));
ds_map_destroy(m);
//
if (type == "discord_ready") {
    discord_activity_register_command(parameter_full);
    window_set_caption(discord_get_username() + "#" + discord_get_discriminator());
    trace("peer", discord_network_get_peer_id_str());
    //
    /*discord_activity_start();
    discord_activity_set_state("Testing!");
    discord_activity_set_details("All takes time");
    discord_activity_set_large_image("thinking");
    discord_activity_set_large_text("large_text");
    discord_activity_set_small_image("totally");
    discord_activity_set_small_text("small_text");
    discord_activity_set_party_size(1, 3);
    discord_activity_update();*/
    //
    discord_lobby_create_start(discord_lobby_type_public);
    discord_lobby_create_set_metadata("title", "Lobby!");
    discord_lobby_create_set_metadata("game", "test");
    discord_lobby_create_submit();
}
if (type == "discord_lobby_create") {
    lobby_id = e[?"lobby_id"];
    lobby_owner_user_id = discord_get_user_id();
    lobby_owner_peer_id = discord_network_get_peer_id();
    discord_activity_start();
    discord_activity_set_join_secret(discord_lobby_get_activity_secret(e[?"lobby_id"]));
    discord_activity_set_party_id(string(e[?"lobby_id"]));
    discord_activity_set_party_size(1);
    discord_activity_set_party_max_size(2);
    discord_activity_set_state("Buckling up");
    discord_activity_update();
    ds_map_clear(lobby_connection_map);
    //
    discord_lobby_search_start();
    discord_lobby_search_set_filter("game", "test", 0);
    discord_lobby_search_submit();
}
if (type == "discord_lobby_search") {
    var n = discord_lobby_search_get_count();
    trace("found", n);
    for (var i = 0; i &lt; n; i++) {
        var q = discord_lobby_search_get_lobby_id(i);
        trace(i, q, discord_lobby_get_metadata_value(q, "title"),
            discord_lobby_get_metadata_count(q), discord_lobby_get_metadata_key(q, 0),
            discord_lobby_get_activity_secret(q));
    }
}
if (type == "discord_activity_join_request") {
    discord_activity_send_request_reply(e[?"user_id"], discord_activity_join_request_reply_yes);
}
if (type == "discord_activity_join") {
    discord_lobby_connect_with_activity_secret(e[?"activity_secret"])
}
if (type == "discord_lobby_connect_with_activity_secret") {
    ds_map_clear(lobby_connection_map);
    lobby_id = e[?"lobby_id"];
    lobby_owner_user_id = e[?"owner_id"];
    lobby_owner_peer_id = int64(discord_lobby_get_member_metadata_value(lobby_id, lobby_owner_user_id, "network_peer_id"));
    lobby_connection_map[?lobby_owner_user_id] = lobby_owner_peer_id;
    var route = discord_lobby_get_member_metadata_value(lobby_id, lobby_owner_user_id, "network_route");
    trace(lobby_owner_peer_id, route);
    trace(discord_network_open_peer(lobby_owner_peer_id, route));
    trace(discord_network_open_channel(lobby_owner_peer_id, 0, true));
    var b/*:Buffer*/ = buffer_create(17, 0, 1);
    buffer_write(b, buffer_string, "hi!1");
    trace(discord_network_send_message(lobby_owner_peer_id, 0, b));
    buffer_delete(b);
}
if (type == "discord_lobby_member_disconnect") {
    ds_map_delete(lobby_connection_map, e[?"user_id"]);
}
if (type == "discord_lobby_member_update") {
    var user_id = e[?"user_id"];
    if (lobby_connection_map[?user_id] == undefined &amp;&amp; user_id != discord_get_user_id()) {
        var peer_id = int64(discord_lobby_get_member_metadata_value(lobby_id, user_id, "network_peer_id"));
        var route = discord_lobby_get_member_metadata_value(lobby_id, user_id, "network_route");
        if (peer_id != undefined &amp;&amp; route != undefined) {
            lobby_connection_map[?user_id] = peer_id;
            trace(discord_network_open_peer(peer_id, route));
            trace(discord_network_open_channel(peer_id, 0, true));
            var b/*:Buffer*/ = buffer_create(17, 0, 1);
            buffer_write(b, buffer_string, "hi!2");
            trace("send",discord_network_send_message(peer_id, 0, b));
            buffer_delete(b);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_test);
draw_set_color(c_white);
var t = room_height, i = 0;
var w = room_width - 10;
repeat (ds_list_size(global.g_trace)) {
    var s = global.g_trace[|i++];
    var h = string_height_ext(s, -1, w);
    t -= h + 5;
    if (point_in_rectangle(mouse_x,mouse_y, 5,t,5+w,t+h)) {
        draw_set_alpha(0.2);
        draw_rectangle(5,t,5+w,t+h,0);
        draw_set_alpha(1);
        if (mouse_check_button_pressed(mb_left)) clipboard_set_text(s);
    }
    draw_text_ext(5, t, s, -1, w);
}
if (keyboard_check_pressed(ord("1"))) {
    var k = ds_map_find_first(lobby_connection_map);
    repeat (ds_map_size(lobby_connection_map)) {
        var b/*:Buffer*/ = buffer_create(17, 0, 1);
        buffer_write(b, buffer_string, "hi!3");
        trace("send-all",discord_network_send_message(lobby_connection_map[?k], 0, b));
        buffer_delete(b);
        k = ds_map_find_next(lobby_connection_map, k);
    }
}
if (keyboard_check_pressed(ord("2"))) {
    var b/*:Buffer*/ = buffer_create(17, 0, 1);
    buffer_write(b, buffer_string, "hi!4");
    trace("send-lobby",discord_lobby_send_message(lobby_id, b));
    buffer_delete(b);
}
if (keyboard_check_pressed(ord("3"))) {
    discord_lobby_search_start();
    discord_lobby_search_submit();
}
if (keyboard_check_pressed(ord("4"))) {
    trace(discord_lobby_update_start(lobby_id));
    discord_lobby_update_set_metadata("title", date_datetime_string(date_current_datetime()));
    discord_lobby_update_submit();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
